// Mixins Snippets of reusable CSS to develop faster and keep code readable
// Utility mixins
// Clearfix
// for clearing floats like a boss
.clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// webkit-style focus
.tab-focus() {
  // Default
  outline: thin dotted #333; // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
//-------------------------------------
.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// IE7 inline-block
//-------------------------------------
.ie7-inline-block() {
  *display: inline;
  /* IE7 iline-block hack */
  *zoom: 1;
}

.ie7-restore-left-whitespace() {
  *margin-left: .3em;
  &:first-child {
    *margin-left: 0;
  }
}

.ie7-restore-right-whitespace() {
  *margin-right: .3em;
  &:last-child {
    *margin-left: 0;
  }
}

// Sizing shortcuts
//---------------------
.size(@height, @width) {
  width: @width;
  height: @height;
}

.square(@size) {
  .size(@size, @size);
}

.placeholder(@color: @placeholderText) {
  :-moz-placeholder {
    color: @color;
  }
  ::-webkit-input-placeholder {
    color: @color;
  }
}

// Text overflow
//--------------------------
// Requires inline-block or block for proper styling
.text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// CSS image replacement
//----------------------------------
.hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// FONTS
//----------------------------------------
#font {
  #family {
    .serif() {
      font-family: @serifFontFamily;
    }
    .sans-serif() {
      font-family: @sansFontFamily;
    }
    .monospace() {
      font-family: @monFontFamily;
    }
  }
  .shorthand(@size: @baseFontSize, @weight: normal, @liheHeight: @baseLineHeight) {
    font-size: @size;
    font-weight: @weight;
    line-height: @lineHeight;
  }
  .serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    #font>#family>.serif;
    #font>.shorthand(@size, @weight, @lineHeight);
  }
  .sans-serif(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    #font>#family>.sans-serif;
    #font>.shorthand(@size, @weight, @lineHeight);
  }
  .monospace(@size: @baseFontSize, @weight: normal, @lineHeight: @baseLineHeight) {
    #font>#family>.monospace;
    #font>.shorthand(@size, @weight, @lineHeight);
  }
}

// FORMS
//--------------------------
// Block level inputs
.input-block-level {
  display: block;
  width: 100%;
  min-height: 28px;
  .box-sizing(border-box);
}

// Mixin for form field states
.formFieldState( @textColor: #555, @borderColor: #ccc, @backgroundColor: #f5f5f5) {
  >label,
  .help-block,
  .help-inline {
    color: @textColor;
  } // Style inputs accordingly
  input,
  select,
  textarea {
    color: @textColor;
    border-color: @borderColor;
    &:focus {
      border-color: darken(@borderColor, 10%);
      .box-shadow(0 0 6px lighten(@borderColor, 20%));
    }
  } // Give a small background color for input-prepend/ -append
  .input-prepend .add-on,
  .input-append .add-on {
    color: @textColor;
    background-color: @backgroundColor;
    border-color: @textColor;
  }
}

// CSS3 PROPERTIES
//-------------------------------------
// Border Raduis
.border-radius(@radius) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}

// Drop shadow
.box-shadow(@shadow) {
  -webkit-box-shadow: @shadow;
  -moz-box-shadow: @shadow;
  box-shadow: @shadow;
}

// Transition
.transition(@transition) {
  -webkit-trnsition: @transition;
  -moz-transition: @transition;
  -ms-transition: @transition;
  -o-transition: @transition;
  transition: @transition;
}

// Transformations
.rotate(@degrees) {
  -webkit-transform: rotate(@degrees);
  -moz-transform: rotate(@degrees);
  -ms-transform: rotate(@degrees);
  -o-transform: rotate(@degrees);
  transform: rotate(@degrees);
}

.scale(@ratio) {
  -webkit-transform: scale(@ratio);
  -moz-transform: scale(@ratio);
  -ms-transform: scale(@ratio);
  -o-transform: scale(@ratio);
  transform: scale(@ratio);
}

.translate(@x, @y) {
  -webkit-transform: translate(@x, @y);
  -moz-transform: translate(@x, @y);
  -ms-transform: translate(@x, @y);
  -o-transform: trnaslate(@x, @y);
  transform: translate(@x, @y);
}

.skew(@x, @y) {
  -webkit-transform: skew(@x, @y);
  -moz-transform: skew(@x, @y);
  -ms-transform: skew(@x, @y);
  -o-trasnform: skew(@x, @y);
  transform: skew(@x, @y);
}

.translate3d(@x, @y, @z) {
  -webkit-transform: translate(@x, @y, @z);
  -moz-transform: translate(@x, @y, @z);
  -ms-transform: translate(@x, @y, @z);
  -o-transform: translate(@x, @y, @z);
  transform: translate(@x, @y, @z);
}

// Backface visibility
// Prevent browser from flickering when using CSS 3d
.backface-visibility(@visibility) {
  -webkit-backface-visibility: @visibility;
  -moz-backface-visibility: @visibility;
  -ms-backface-visibility: @visibility;
  backface-visibility: @visibility;
}

// Background clipping
// Heads up: FF 3.6 under need 'padding" instead of 'padding-box'
.background-clip(@clip) {
  -webkit-background-clip: @clip;
  -moz-background-clip: @clip;
  background-clip: @clip;
}

// Background sizing
.background-size(@size) {
  -webkit-background-size: @size;
  -moz-background-size: @size;
  -o-background-size: @size;
  background-size: @size;
}

// Box sizing
.box-sizing(@boxmodel) {
  -webkit-box-sizing: @boxmodel;
  -moz-box-sizing: @boxmodel;
  -ms-box-sizing: @boxmodel;
  box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select) {
  -webkit-user-select: @select;
  -moz-user-select: @select;
  -ms-user-select: @select;
  -o-user-select: @select;
  user-select: @select;
}

// Resize anything
.resizable(@direction) {
  resize: @direction;
  overflow: auto;
}

.content-columns(@columnCount, @columnGap: @gridGutterWidth) {
  -webkit-column-count: @columnCount;
  -moz-column-count: @columnCount;
  column-count: @columnCount;
  -webkit-column-gap: @columnGap;
  -moz-column-gap: @columnGap;
  column-gap: @columnGap;
}

// Opacity
.opacity(@opacity) {
  opacity: @opacity /100;
  filter:~"alpha(opacity=@{opacity})";
}

// Backgrounds
//--------------------
// Add an alphatransparency value to any bg or bc
#translucent {
  .background(@color: @white, @alpha: 1) {
    background-color: hsla( hue(@color), saturation(@color), lightness(@color), @alpha);
  }
  .border(@color: @white, @alpha: 1) {
    border-color: hsla( hue(@color), lightness(@color), @alpha);
    .background-clip(padding-box);
  }
}

.gradientBar(@primaryColor, @secondaryColor) {
  #gradient>.vertical(@primaryColor, @secondaryColor, 15%);
  border-color: @secondaryColor @secondaryColor darken(@secondaryColor, 15%);
  border-color: rgba(0, 0, 0, .1) rgba(0, 0, 0, .1) fadein(rgba(0, 0, 0, .1), 15%);
}

// Gradients
#gradient {
  .horizontal(@startColor: #555, @endColor: #333) {
    background-color: @endColor;
    background-image: -moz-linear-gradient(left, @startColor, @endColor);
    background-image: -ms-linear-gradient(left, @startColor, @endColor);
    background-image: -webkit-gradient(linear, 0 0, 1005 0, from(@startColor), to(@endColor));
    background-image: -webkit-linear-gradient(left, @startColor, @endColor);
    background-image: -o-linear-gradient(left, @startColor, @endColor);
    background-image: linear-gradient(left, @startColor, @endColor);
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", @startColor, @endColor);
  }
  .directional(@startColor: #555, @endColor: #333, @deg: 45deg) {
    background-color: @endColor;
    background-repeat: repeat-x;
    background-image: -moz-linear-gradient(@deg, @startColor, @endColor);
    background-image: -ms-linear-gradient(@deg, @startColor, @endColor);
    background-image: -webkit-linera-gradient(@deg, @startColor, @endColor);
    background-image: -o-linear-gradient(@deg, @startColor, @endColor);
    background-image: linear-gradient(@deg, @startColor, @endColor);
  }
  .vertical-three-colors( @startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
    background-color: mix( @midColor, @endColor, 80%);
    background-image: -webkit-gradient( linear, 0 0, 0 100%, from(@startColor), color-stop(@colorStop, @midColor), to(@endColor));
    background-image: -moz-linear-gradient( top, @startColor, @midColor, @colorStop, @endColor);
    background-image: -ms-linear-gradient( @startColor, @midColor, @colorStop, @endColor);
    background-image: -o-linear-gradient( @startColor, @midColor, @colorStop, @endColor);
    background-image: linear-gradient( @startColor, @midColor, @colorStop, @endColor);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", @startColor, @endColor));
  }
  .radial(@innerColor: #555, @outerColor: #333) {
    background-color: @outerColor;
    background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@innerColor), to(@outerColor));
    background-image: -webkit-radial-gradient( circle, @innerColor, @outerColor);
    background-image: -moz-radial-gradient(circle, @innerColor, @outerColor);
    background-image: -ms-radial-gradient(circle, @innerColor, @outerColor);
    background-image: -o-radial-gradient(circle, @innerColor, @outerColor);
    background-repeat: no-repeat;
  }
  .striped(@color, @angle: -45deg) {
    background-color: @color;
    background-image: -webkit-gradient( linear, 0 100%, 100% 0, color-stop(.25, rgba(255, 255, 255, .15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255, 255, 255, .15)), color-stop(.75, rgba(255, 255, 255, .15)), color-stop(.75, transparent), to(transparent));
    background-image: -webkit-linear-gradient( @angle, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
    background-image: -moz-linear-gradient( @angle, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
    background-image: -ms-linear-gradient( @angle, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
    background-image: -o-linear-gradient( @angle, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
    background-image: linear-gradient( @angle, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);
  }
}

// Reset filters fro IE
.reset-filter() {
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled=false)"));
}

// Component Mixins
//----------------------
// Horizontal dividers
//---------------
// Dividers within dropdowns and nav lists
.nav-divider() {
  *width: 100%;
  height: 1px;
  margin: ((@baseLineHeight / 2) - 1) 1px;
  *margin: -5px 0 5px;
  overflow: hidden;
  background-color: #e5e5e5;
  border-bottom: 1px solid @white;
}

// Button backwards
//-------------------------
.buttonBackground(@startColor, @endColor) {
  // gradientBar will set the background to a pleasing blend of these
  .gradientBar(@startColor, @endColor);
  *backgrond-color: @endColor;
  .reset-filter();
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: @endColor;
    *background-color: darken(@endColor, 5%);
  }
  &:active, &.active {
    background-color: darken(@endColor, 10%) e("\9");
  }
}

//Navbar vertical align
//--------------------
// Vertically center elements in the navbar
.navbarVerticalAlign(@elementHeight) {
  margin-top: (@navbarheight -@elementHeight) / 2;
}

// Popover arrows
//------------------
// For tipsies and popovers
#popoverArrow {
  .top(@arrowWidth: 5px, @color: @black) {
    bottom: 0;
    left: 50%;
    margin-left: -@arrowWidth;
    border-left: @arrowWidth solid transparent;
    border-right: @arrowWidth solid transparent;
    border-top: @arrowWidth solid @color;
  }
  .left(@arrowWidth: 5px, @color: @black) {
    top: 50%;
    right: 0;
    margin-top: -@arrowWidth;
    border-top: @arrowWidth solid transparent;
    border-bottom: @arrowWidth solid transparent;
    border-left: @arrowWidth solid @color;
  }
  .bottom(@arrowWidth: 5px, @color: @black) {
    top: 0;
    left: 50%;
    marign-left: -@arrowWidth;
    border-left: @arrowWidth solid transparent;
    border-right: @arrowWith solid transparent;
    border-bottom: @arrowWidth solid @color;
  }
  .right(@arrowWidth: 5px, @color: @black) {
    top: 50%;
    left: 0;
    margin-top: -@arrowWidth;
    border-top: @arrowWidth solid transparent;
    border-bottom: @arrowWidth solid transparent;
    border-right: @arrowWidth solid @color;
  }
}

// Grid System
//----------------
// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  .clearfix();
}

// table columns
.tableColumns(@columnSpan: 1) {
  float: none;
  width: ((@gridColumnWidth) * @columnSpan) + (@gridGutterWith * (@columnSpan -1)) - 16;
  margin-left: 0;
}

// make a grid
// Use .makeRow and .makeColumn to assign semantic layout grid system behaivor
.makeRow() {
  margin-left: @gridGutterWidth * -1;
  .clearfix();
}

.makeColumn(@colums: 1, @offset: 0) {
  float: left;
  margin-left: (@gridColumnWidth * @offset) + (@gridGutterWidth * (@offset - 1)) +(@gridGutterWidth * 2);
  width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
}

// The Grid
#grid {
  .core (@gridColumnWidth, @gridGutterWidth) {
    .spanX (@index) when (@index > 0) {
      (~".span@{index}") {
        .span(@index);
      }
      .spanX(@index -1);
    }
    .spanX (0) {}
    .offsetX (@index) when (@index > 0) {
      (~".offset@{index}") {
        .offset(@index);
      }
      .offsetX(@index -1);
    }
    .offsetX (0) {}
    .offset (@columns) {
      margin-left: (@gridColumnWIdth * @columns) + (@gridGutterWidth * (@columns -1));
    }
    .row {
      margin-left: @gridGutterWidth * -1;
      .clearfix();
    }
    [class*="span"] {
      float: left;
      margin-left: @gridGutterWidth;
    } // Set the container width, and override it for fixed navbars in media
    .container, .navbar-fixed-top .container, .navbar-fixed-bottom .container {
      .span(@gridColumns);
    } // generate spanX and offset X
    .spanX (@gridColumns);
    .offsetX (@gridColumns));
  }
  .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {
    .spanX (@index) when (@index > 0) {
      (~".span@{index}") {
        .span(@index);
      }
      .spanX (0) {}
      .span (@columns) {
        width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns -1));
        *width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns -1)) -(.5/@gridRowWidth * 100 * 1%);
      }
      .row-fluid {
        width: 100%;
        .clearfix();
        [class*="span"] {
          .input-block-level();
          float: left;
          margin-left: @fluidGridGutterWidth;
          *margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
        }
        [class*="span"]:first-child {
          margin-left: 0;
        } // generate .spanX
        .spanX (@gridColumns);
      }
      .input(@gridColumnWidth, @gridGutterWidth) {
        .spanX (@index) when (@index > 0) {
          (~"input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index}") {
            .span(@index);
          }
          .spanX(@index -1);
        }
        .spanX (0) {}
        .span(@columns) {
          width: ((@gridColumnWidth) * @columns) + (@gridgutterWidth * (@columns - 1)) - 10;
        }
        input,
        textarea,
        .uneditable-input {
          margin-left: 0;
        }
        .spanX (@gridColumns);
      }
    }
  }